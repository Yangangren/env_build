import os,sys
base_dir=os.path.dirname(__file__)
sys.path.append(base_dir)
from LasVSim.simulator import *

simulation = None

def create_simulation(path=None):
    """Create a LasVSim simulation.

    Args:
        path: Simulation setting file path.
    """
    global simulation
    simulation = Simulation(setting_path=path)
    return simulation


def load_scenario(path):
    """Load a simulation setting file.

    Args:
        path: Simulation setting file path.
    """
    simulation.load_scenario(path)


def sim_step(steps=None):
    if steps is None:
        steps = 1
    return simulation.sim_step(steps)


def sim_step_internal(steps=None):
    """Run simulation for given steps.

    This function only updates traffic and ego dynamic states. If no decision
    output or controller output is given, then the last step value will be used.

    Args:
        steps: Simulation steps, int.
    """
    if steps is None:
        steps = 1
    return simulation.sim_step_internal(steps)


def get_all_objects():
    """Get all objects' info at current step.

    Returns:
         A list containing each object's info at current step. For example:

         [{'type': 0, 'x': 0.0, 'y': 0.0, 'v': 0.0, 'angle': 0.0, 'rotation': 0,
         'winker': 0, 'winker_time': 0, 'length': 0.0, 'width': 0.0,
         'height': 0.0, 'radius': 0.0}, ...]
         The order of objects is constant at every step..
    """
    return simulation.get_all_objects()


def get_detected_objects():
    """Get object's info which is detected by ego vehicle at current step.

    Returns:
         A list containing each detected object's info at current step.
         For example:

         [(id, x, y, v, a, w, h), (2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),...]
         The id of each objects is constant at every step..
    """
    return simulation.get_detected_objects()



def get_ego_position():
    """Get ego vehicle's 2-d geo position.

    Returns:
        A list consists of x coordinate and y coordinate. For example:

        [23.442, 23.44] The first indicates x coordinate.
    """
    return simulation.get_ego_position()

def get_ego_info():
    """Get ego vehicle's 2-d geo position.

    Returns:
       self.agent.dynamic.get_pos(), self.agent.dynamic.get_info(), self.traffic.get_road_related_info_of_ego()
    """
    return simulation.get_ego_info()

def get_Steer_FACTOR():
    return simulation.settings.car_para.Steer_FACTOR


def set_engine_torque(torque):
    """Set ego vehicle's engine output torque in N*m.
    """
    simulation.agent.engine_torque = torque
    simulation.agent.controller.set_track(
        engine_torque=simulation.agent.engine_torque,
        brake_pressure=simulation.agent.brake_pressure,
        steering_wheel=simulation.agent.steer_wheel)


def set_brake_pressure(brake):
    """Set ego vehicle's brake system pressure in Mpa."""
    simulation.agent.brake_pressure = brake
    simulation.agent.controller.set_track(
        engine_torque=simulation.agent.engine_torque,
        brake_pressure=simulation.agent.brake_pressure,
        steering_wheel=simulation.agent.steer_wheel)


def set_steer_angle(steer):
    """Set ego vehicle's steering wheel angle in deg."""
    simulation.agent.steer_wheel = steer
    simulation.agent.controller.set_track(
        engine_torque=simulation.agent.engine_torque,
        brake_pressure=simulation.agent.brake_pressure,
        steering_wheel=simulation.agent.steer_wheel)

def set_steer_angle_and_acc(steer,acc):
    """Set ego vehicle's steering wheel angle in deg."""
    simulation.agent.steer_wheel = steer
    simulation.agent.acceleration = acc
    simulation.agent.controller.set_track(
        steering_wheel=simulation.agent.steer_wheel,
        acceleration=simulation.agent.acceleration)

def save_simulation_data(path):
    """Save simulation data."""
    simulation.export_data(path)


def get_desired_trajectory():
    """Get desired spatio-temporal trajectory generated by internal DAG planner.

    Returns:
        A list containing each desired point info. For example:

        [(t, x, y, v, a), (0.2s, 32.42m, 324.23m, 2.3m/s, 23.6deg), ...]
    """
    simulation.agent.update_plan_output(traffic_lights=[1, 2])  # TODO(Xu Chen)
    return simulation.agent.route


def get_current_task():
    """Get ego vehicle's driving task for next intersection.

    Returns:
        'L' for turn left.
        'R' for turn right.
        'S' for go straight.
        'U' for make a U turn
    """
    if simulation is None:
        print('No simulation loaded.')
        return False
    return simulation.get_current_task


def export_simulation_data(path):
    """
    Export simulation data in csv format.

    Args:
        path(string): "FileName.csv"

    Returns:

    """
    if simulation is None:
        print('No simulation loaded.')
        return False
    simulation.export_data(path)


def get_bias():
    """Return ego vehicle's distance to the center of it;s current lane.

    Returns:
        double, m."""
    return simulation.traffic.get_dis_to_center_line()


def reset_simulation(start_position=None, density='Sparse', simu_method=False):
    """Reset simulation to it's initial state."""
    simulation.reset(settings=simulation.settings,start_position=start_position,density=density, simu_method=simu_method)


def return_current_simulation_step():
    """Return current simulation step"""
    return simulation.tick_count


def close():
    simulation.traffic.traci.close()













